# The OWASP CSRFGuard Project, BSD License

# Eric Sheridan (eric@infraredsecurity.com), Copyright (c) 2011 

# All rights reserved.

#

# Redistribution and use in source and binary forms, with or without

# modification, are permitted provided that the following conditions are met:

#

# 1. Redistributions of source code must retain the above copyright notice,

#    this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright

#    notice, this list of conditions and the following disclaimer in the

#    documentation and/or other materials provided with the distribution.

# 3. Neither the name of OWASP nor the names of its contributors may be used

#    to endorse or promote products derived from this software without specific

#    prior written permission.

#

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"

# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE

# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES

# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;

# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON

# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS

# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



# From: https://github.com/esheri3/OWASP-CSRFGuard/blob/master/csrfguard-test/src/main/webapp/WEB-INF/csrfguard.properties



# Common substitutions

# %servletContext%  is the servlet context (e.g. the configured app prefix or war file name, or blank.

# e.g. if you deploy a default warfile as someApp.war, then %servletContext% will be /someApp

# if there isnt a context it will be the empty string.  So to use this in the configuration, use e.g. %servletContext%/something.html

# which will translate to e.g. /someApp/something.html




org.owasp.csrfguard.handler.RegExHandler = org.owasp.csrfguard.handlers.RegExHandler
#org.owasp.csrfguard.handler.RegExHandler.FormPattern = (? i) </form>


















# Logger

#

# La propiedad del Logger (org.owasp.csrfguard.Logger) define el nombre de clase calificado del objeto responsable de 

# procesar todos los mensajes de registro producidos por CSRFGuard. El registrador CSRFGuard predeterminado 

# es org.owasp.csrfguard.log.ConsoleLogger. Esta clase registra todos los mensajes en System.out que los servidores 

# de aplicaciones JavaEE redirigen a un archivo de registro específico del proveedor. Los desarrolladores pueden 

# personalizar el comportamiento de registro de CSRFGuard implementando la interfaz org.owasp.csrfguard.log.ILogger y

# configurando la propiedad del registrador con el nombre de clase calificado del nuevo registrador. 

# El siguiente fragmento de configuración indica a OWASP CSRFGuard que capture todos los mensajes de registro en la consola:

#

 org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.ConsoleLogger

# org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.JavaLogger













# Which configuration provider factory you want to use.  The default is org.owasp.csrfguard.config.PropertiesConfigurationProviderFactory

# Another configuration provider has more features including config overlays: org.owasp.csrfguard.config.overlay.ConfigurationOverlayProviderFactory

# The default configuration provider is: org.owasp.csrfguard.config.overlay.ConfigurationAutodetectProviderFactory

# which will look for an overlay file, it is there, and the factory inside that file is set it will use it, otherwise will be PropertiesConfigurationProviderFactory

# it needs to implement org.owasp.csrfguard.config.ConfigurationProviderFactory

# Necesario para el AutoConfig

org.owasp.csrfguard.configuration.provider.factory=org.owasp.csrfguard.config.overlay.ConfigurationAutodetectProviderFactory













# New Token Landing Page

#

# La nueva propiedad de página de destino de token (org.owasp.csrfguard.NewTokenLandingPage) define dónde enviar a un usuario

# si el token se genera por primera vez. Esta solicitud se genera mediante formularios de publicación automática y solo

# contendrá el parámetro de token de prevención CSRF, si corresponde. Se descartarán todos los parámetros de cadena de

# consulta o formulario enviados con la solicitud original. Si esta propiedad no está definida, CSRFGuard en su lugar

# publicará automáticamente al usuario en el contexto original y la ruta del servlet. El siguiente fragmento de configuración

# indica a OWASP CSRFGuard que redirija al usuario a /Owasp.CsrfGuard.Test/index.html cuando el usuario visita un

# recurso protegido sin tener un token CSRF presente en el objeto HttpSession:

#

#org.owasp.csrfguard.NewTokenLandingPage=^(%servletContext%/)|(%servletContext%/)(home.xhtml|home.jsf|forward.jsp|forward.jsf|index.jsp|index.html)$

org.owasp.csrfguard.NewTokenLandingPage=%servletContext%/home.jsf









# Unique Per-Page Tokens

#

# La propiedad de token único por página (org.owasp.csrfguard.TokenPerPage) es un valor booleano que determina si CSRFGuard

# debe utilizar tokens de prevención únicos por página (es decir, URI) en lugar de tokens de prevención únicos por sesión. 

# Cuando un usuario solicita un recurso protegido, CSRFGuard determinará si se ha generado previamente un token específico 

# de página. Si todavía no se ha generado un token específico de página, CSRFGuard verificará que la solicitud se haya 

# enviado con el token por sesión intacto. Después de verificar la presencia del token por sesión, CSRFGuard creará un 

# token específico de página que se requiere para todas las solicitudes posteriores al recurso asociado. El token CSRF por 

# sesión solo se puede usar cuando se solicita un recurso por primera vez. Todas las solicitudes posteriores deben tener el 

# token por página intacto o la solicitud se tratará como un ataque CSRF. El uso de la propiedad de token único por página 

# es actualmente experimental pero proporciona una cantidad significativa de seguridad mejorada. Considere la exposición de 

# un token CSRF utilizando el modelo heredado único por sesión. La exposición de este token facilita la capacidad del atacante

# para llevar a cabo un ataque CSRF contra la sesión activa de la víctima por cualquier recurso expuesto por la aplicación web. 

#Ahora considere la exposición de un token CSRF utilizando el modelo experimental único de token por página. La exposición de 

# este token solo permitiría al atacante llevar a cabo un ataque CSRF contra la sesión activa de la víctima por un pequeño 

# subconjunto de recursos expuestos por la aplicación web. El uso de la propiedad única de token por página es una fuerte 

# estrategia de defensa en profundidad que reduce significativamente el impacto de los tokens de prevención CSRF expuestos. 

# El siguiente fragmento de configuración indica a OWASP CSRFGuard que utilice el modelo de token único por página:

#

# org.owasp.csrfguard.TokenPerPage=true

# org.owasp.csrfguard.TokenPerPagePrecreate=false

org.owasp.csrfguard.TokenPerPage=true

org.owasp.csrfguard.TokenPerPagePrecreate=true











# Token Rotation

#

# La propiedad rotar token (org.owasp.csrfguard.Rotate) es un valor booleano que determina si CSRFGuard debe generar y 

# utilizar un nuevo token después de verificar el token anterior. La rotación ayuda a minimizar la oportunidad que tiene 

# un atacante para aprovechar el token robado de la víctima en un ataque CSRF dirigido. Sin embargo, esta funcionalidad 

# generalmente causa problemas de navegación en la mayoría de las aplicaciones. Específicamente, el botón 'Atrás' en el 

# navegador a menudo dejará de funcionar correctamente. Cuando un usuario presiona el botón 'Atrás' e interactúa con el HTML, 

# el navegador puede enviar un token antiguo que hace que CSRFGuard crea incorrectamente que esta solicitud es un ataque CSRF

# en progreso (es decir, un 'falso positivo'). Los usuarios pueden evitar este escenario evitando el almacenamiento en caché 

# de páginas HTML que contienen envíos FORM utilizando el encabezado de control de caché. Sin embargo, esto también puede presentar

# problemas de rendimiento, ya que el navegador tendrá que solicitar HTML con mayor frecuencia. El siguiente fragmento de 

# configuración deshabilita la rotación de tokens:

#

# org.owasp.csrfguard.Rotate=true

org.owasp.csrfguard.Rotate = true











# Ajax and XMLHttpRequest Support

#

# La propiedad Ajax (org.owasp.csrfguard.Ajax) es un valor booleano que indica si OWASP CSRFGuard debe admitir la inyección y

# verificación de tokens de prevención únicos por sesión para XMLHttpRequests. Para aprovechar el soporte de Ajax, el usuario no 

# solo debe establecer esta propiedad en true, sino que también debe hacer referencia a la manipulación DOM de JavaScriptcódigo 

# usando un elemento de script. Este script dinámico anulará el método de envío del objeto XMLHttpRequest para garantizar el envío 

# de un par de valores de nombre de encabezado X-Requested-With junto con el envío de un par de valores de nombre de encabezado 

# personalizado para cada solicitud. El nombre del encabezado personalizado es el valor de la propiedad del nombre del token y el 

# valor del encabezado siempre es el valor único del token por sesión. Este encabezado personalizado es análogo a los pares de 

# valores de nombre de parámetro HTTP enviados a través de solicitudes GET y POST tradicionales. Si el encabezado X-Requested-With

# se envió en la solicitud HTTP, entonces CSRFGuard buscará la presencia y asegurará la validez del token único por sesión en el 

# par de valores de nombre de encabezado personalizado. Tenga en cuenta que la verificación de estos encabezados tiene prioridad 

# sobre la verificación del token CSRF suministrado como un parámetro HTTP. Más específicamente, CSRFGuard no verifica la presencia 

# del token CSRF si la propiedad de soporte de Ajax está habilitada y los encabezados X-Requested-With y personalizados 

# correspondientes están integrados en la solicitud. El siguiente fragmento de configuración indica a OWASP CSRFGuard que admita

# las solicitudes de Ajax al verificar la presencia y la corrección de los encabezados X-Requested-With y personalizados:

#

# org.owasp.csrfguard.Ajax=true

org.owasp.csrfguard.Ajax=true













# El comportamiento predeterminado de CSRFGuard es proteger todas las páginas. Las páginas marcadas como no protegidas no estarán protegidas.

# Si la propiedad Proteger está habilitada, este comportamiento se revierte. Las páginas deben estar marcadas como protegidas para 

# estar protegidas.

# Todas las demás páginas no estarán protegidas. Esto es útil cuando CsrfGuardFilter está mapeado agresivamente (por ejemplo: / *),

# pero solo desea proteger unas pocas páginas.

#

# org.owasp.csrfguard.Protect=true











# Unprotected Pages:

#

# La propiedad de páginas desprotegidas (org.owasp.csrfguard.unprotected. *) Define una serie de páginas que no deben estar 

# protegidas por CSRFGuard. Dichas configuraciones son útiles cuando CsrfGuardFilter se asigna de forma agresiva (por ejemplo: / *).

# La sintaxis del nombre de la propiedad es org.owasp.csrfguard.unprotected. [PageName], donde PageName es un identificador

# arbitrario que se puede utilizar para hacer referencia a un recurso. La sintaxis para definir la uri de las páginas 

# desprotegidas es la misma que la sintaxis utilizada por el contenedor JavaEE para la asignación de uri. Específicamente, 

# CSRFGuard identificará la primera coincidencia (si existe) entre la uri solicitada y una página desprotegida en orden 

# de declaración. Los criterios de coincidencia son los siguientes:



# Caso 1: coincidencia exacta entre la uri de solicitud y la página desprotegida

# Caso 2: coincidencia de prefijo de ruta más larga, principio / y finalización / *

# Caso 3: coincidencia de extensión, comienzo *.

# Valor predeterminado: el recurso solicitado debe ser validado por CSRFGuard



# El siguiente fragmento de código ilustra los tres casos de uso en cuatro ejemplos. 

# Los primeros dos ejemplos (Tag y JavaScriptServlet) buscan coincidencias directas de URI. 

# El tercer ejemplo (Html) busca todos los recursos que terminan en una extensión .html. 

# El último ejemplo (Público) busca todos los recursos con el prefijo de la ruta URI / MySite / Public / *.

#

# SE ENECESITAN OMITIR PARA QUE MUESTRE LA PAGINA DE LOGIN Y LA DE ERRORES DEL SERVIDOR

# DEBIDO A QUE SE TIENEN DOS CONTEXTOS PRINCIPALES, EN LUGAR DE ESPECIFICAR UNA RUTA FIJA, MEDIANTE UN REGEX SE AGREGAN LAS DOS

#org.owasp.csrfguard.unprotected.Default=%servletContext%/controller

org.owasp.csrfguard.unprotected.Default=^(%servletContext%/)(forward.jsp|home.jsf|homeIPLANET.xhtml|indexIPLANET.html|logout.jsp|out.xhtml)$

#org.owasp.csrfguard.unprotected.Tag=%servletContext%/forward.jsp

org.owasp.csrfguard.unprotected.JavaScriptServlet=%servletContext%/JavaScriptServlet

# org.owasp.csrfguard.unprotected.Html=*.html

org.owasp.csrfguard.unprotected.Error=%servletContext%/errors/*

org.owasp.csrfguard.unprotected.Redirect=%servletContext%/errors/error403.jsp

#

org.owasp.csrfguard.unprotected.CSS=^(%servletContext%/)(css\/.*|inc\/.*)$

org.owasp.csrfguard.unprotected.Scripts=%servletContext%../img_contracts/js/adquirente.js/*

org.owasp.csrfguard.unprotected.JS=%servletContext%../img_contracts/js/adquirente.js/*

org.owasp.csrfguard.unprotected.GIF=%servletContext%../img_contracts/images/*

org.owasp.csrfguard.unprotected.PNG=%servletContext%../img_contracts/images/*

org.owasp.csrfguard.unprotected.JPG=%servletContext%../img_contracts/images/*





# regex example starts with ^ and ends with $, and the %servletContext% is evaluated before the regex

# org.owasp.csrfguard.unprotected.PublicServlet=^%servletContext%/.*Public\.do$



#org.owasp.csrfguard.unprotected.Default=%servletContext%/

#org.owasp.csrfguard.unprotected.Upload=%servletContext%/upload.html

#org.owasp.csrfguard.unprotected.JavaScriptServlet=%servletContext%/JavaScriptServlet

#org.owasp.csrfguard.unprotected.Ajax=%servletContext%/ajax.html

#org.owasp.csrfguard.unprotected.Error=%servletContext%/error.html

#org.owasp.csrfguard.unprotected.Index=%servletContext%/index.html

#org.owasp.csrfguard.unprotected.JavaScript=%servletContext%/javascript.html

#org.owasp.csrfguard.unprotected.Tag=%servletContext%/tag.jsp

#org.owasp.csrfguard.unprotected.Redirect=%servletContext%/redirect.jsp

#org.owasp.csrfguard.unprotected.Forward=%servletContext%/forward.jsp

#org.owasp.csrfguard.unprotected.Session=%servletContext%/session.jsp













# Actions: Responding to Attacks

#

# La directiva de acciones (org.owasp.csrfguard.action. *) Le da al usuario la capacidad de especificar una o más acciones

# que deberían invocarse cuando se detecta un ataque CSRF. Cada acción debe implementar la interfaz 

# org.owasp.csrfguard.action.IAction, ya sea directa o indirectamente a través de la clase auxiliar 

# org.owasp.csrfguard.action.AbstractAction. Muchas acciones aceptan parámetros que se pueden especificar junto con la 

# declaración de clase de acción. Estos parámetros se consumen en tiempo de ejecución e impactan el comportamiento de la

# acción asociada.

#

# La sintaxis para definir y configurar acciones CSRFGuard es relativamente sencilla. Supongamos que deseamos redirigir al 

# usuario a una página predeterminada cuando se detecta un ataque CSRF. Ya existe una acción de redireccionamiento dentro del

# paquete CSRFGuard y está disponible a través del nombre de clase org.owasp.csrfguard.actions.Redirect. Para habilitar esta 

# acción, capturamos la siguiente declaración en el archivo Owasp.CsrfGuard.properties:

#

# sintaxis: org.owasp.csrfguard.action. [actionName] = [className]

# ejemplo: org.owasp.csrfguard.action.class.Redirect = org.owasp.csrfguard.actions.Redirect

# 

# La directiva mencionada anteriormente declara una acción llamada "Redirect" (es decir, [actionName]) que hace referencia a 

# la clase Java "org.owasp.csrfguard.actions.Redirect" (es decir, [className]). Cada vez que se detecta un ataque CSRF, se 

# ejecutará la acción Redirigir. Puede que se pregunte, "pero ¿cómo especifico a dónde se redirige al usuario?"; Aquí es donde 

# entran en juego los parámetros de acción. Para especificar la ubicación de redireccionamiento, capturamos la siguiente 

# declaración en el archivo Owasp.CsrfGuard.properties:

#

# sintaxis: org.owasp.csrfguard.action. [actionName]. [parámetroName] = [parámetroValue]

# ejemplo: org.owasp.csrfguard.action.Redirect.ErrorPage = / Owasp.CsrfGuard.Test / error.html

#

# La directiva mencionada declara un parámetro de acción llamado "ErrorPage" (es decir, [parámetroName]) con el valor de 

# "/Owasp.CsrfGuard.Test/error.html" (es decir, [parámetroValor]) para la acción "Redirigir" (es decir, [actionName] ) 

# La acción Redirigir espera que se defina el parámetro "ErrorPage" y redirigirá al usuario a esta ubicación cuando se 

# detecte un ataque.

#

#

#

#

# org.owasp.csrfguard.action.Log

# Crea un mensaje de registro personalizado cada vez que OWASP CSRFGuard detecta un ataque CSRF. El mensaje de 

# registro se captura utilizando el mecanismo de registro definido por la directiva org.owasp.csrfguard.Logger en el 

# archivo Owasp.CsrfGuard.properties. Log acepta los siguientes parámetros de acción:

#

# 	org.owasp.csrfguard.action.Log.Message

#

# Permite al usuario definir el formato del mensaje de registro que se grabará. El parámetro Mensaje admite varias 

# opciones de formato para ayudar en la personalización del mensaje para el ataque particular. Se admiten las siguientes 

# opciones de formato:

# %exception% - Representación de cadena de la CsrfGuardException lanzada por la clase CsrfGuard.

# %exception_message% : mensaje de excepción localizado de la clase CsrfGuardException lanzada por la clase CsrfGuard.

# %remote_ip% : dirección IP remota del cliente que envió el ataque CSRF al servidor.

# %remote_host% : nombre de host remoto del cliente que envió el ataque CSRF al servidor.

# %remote_port% : puerto remoto del cliente que envió el ataque CSRF al servidor.

# %local_ip% : dirección IP local del servidor que detectó el ataque CSRF.

# %local_host% : nombre de host local del servidor que detectó el ataque CSRF.

# %local_port%- Puerto local del servidor que detectó el ataque CSRF.

# %request_uri% : solicita el URI al que estaba dirigido el ataque CSRF.

# %request_url% : solicita la URL a la que se dirigió el ataque CSRF.

# %user% : información del usuario disponible mediante la invocación del método javax.servlet.http.HttpServletRequest.getRemoteUser ().

#

# org.owasp.csrfguard.action.Invalidate

# Invalide cualquier HttpSession existente asociada con la HttpServletRequest actual. Tenga en cuenta que esta es la 

# sesión de la víctima a la que apuntaba el ataque CSRF. La invalidación de la sesión del contenedor JavaEE generalmente

# da como resultado que el usuario tenga que volver a autenticarse. No hay parámetros asociados con esta acción.

#

# org.owasp.csrfguard.action.Redirect

# Redirige al usuario al URI especificado en el parámetro de acción Página. Intentar utilizar esta acción en combinación

# con Forward generalmente dará como resultado que el contenedor JavaEE arroje IllegalStateException. La acción acepta 

# los siguientes parámetros de acción:

# 	org.owasp.csrfguard.action.Redirect.Page

# Define el URI para el que se redirige al usuario cuando se detecta un ataque CSRF.

#

# org.owasp.csrfguard.action.Rotate

# Invalida y vuelve a generar cualquier token de prevención CSRF existente asociado con la HttpSession actual. 

# Esta acción ayuda a minimizar el riesgo de que un usuario malintencionado intente forzar con fuerza los tokens 

# de prevención de un usuario a través de ataques de canal lateral basados \u200B\u200Ben el tiempo. Tenga en cuenta 

# que esta acción no tiene efecto cuando se usa junto con la acción Invalidar. No hay parámetros asociados con esta acción.

#

#org.owasp.csrfguard.action.Empty=org.owasp.csrfguard.action.Empty

org.owasp.csrfguard.action.Log=org.owasp.csrfguard.action.Log

org.owasp.csrfguard.action.Log.Message=Potencial ataque cross-site request forgery (CSRF) frustrado (user:%user%, ip:%remote_ip%, method:%request_method%, uri:%request_uri%, url:%request_url% error:%exception_message%)

org.owasp.csrfguard.action.Invalidate=org.owasp.csrfguard.action.Invalidate

org.owasp.csrfguard.action.Redirect=org.owasp.csrfguard.action.Redirect

org.owasp.csrfguard.action.Redirect.Page=%servletContext%/errors/error403.jsp

#org.owasp.csrfguard.action.RequestAttribute=org.owasp.csrfguard.action.RequestAttribute

#org.owasp.csrfguard.action.RequestAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key

org.owasp.csrfguard.action.Rotate=org.owasp.csrfguard.action.Rotate

#org.owasp.csrfguard.action.SessionAttribute=org.owasp.csrfguard.action.SessionAttribute

#org.owasp.csrfguard.action.SessionAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key

#org.owasp.csrfguard.action.Error=org.owasp.csrfguard.action.Error

#org.owasp.csrfguard.action.Error.Code=403

#org.owasp.csrfguard.action.Error.Message=Security violation.













# Token Name

#

# La propiedad de nombre de token (org.owasp.csrfguard.TokenName) define el nombre del parámetro HTTP para contener 

# el valor del token OWASP CSRFGuard para cada solicitud. El siguiente fragmento de configuración establece el nombre 

# del parámetro del token CSRFGuard en el valor OWASP_CSRFTOKEN:

#

# org.owasp.csrfguard.TokenName=OWASP-CSRFTOKEN

org.owasp.csrfguard.TokenName=OWASP-CSRFTOKEN













# Session Key

#

# La propiedad de clave de sesión (org.owasp.csrfguard.SessionKey) define el literal de cadena utilizado para guardar

# y buscar el token CSRFGuard de la sesión. El filtro y las bibliotecas de etiquetas utilizan este valor para recuperar

# y establecer el valor del token en la sesión. Los desarrolladores pueden usar esta clave para buscar mediante 

# programación el token dentro de su propio código. El siguiente fragmento de configuración establece la clave de 

# sesión en el valor OWASP_CSRFTOKEN:

#

# org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN

org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN













# Token Length

#

# La propiedad de longitud del token (org.owasp.csrfguard.TokenLength) define el número de caracteres que se deben 

# encontrar dentro del token CSRFGuard. Tenga en cuenta que los caracteres están delimitados por guiones (-) en grupos 

# de cuatro. Por razones estéticas, se recomienda a los usuarios que se aseguren de que la longitud del token sea 

# divisible por cuatro. El siguiente fragmento de configuración establece la propiedad de longitud del token en 32 caracteres:

#

# org.owasp.csrfguard.TokenLength=32

org.owasp.csrfguard.TokenLength=32













# Pseudo-random Number Generator

#

# La propiedad del generador de números pseudoaleatorios (org.owasp.csrfguard.PRNG) define qué PRNG debe usarse para 

# generar el token OWASP CSRFGuard. Asegúrese siempre de que este valor haga referencia a un algoritmo generador de 

# números pseudoaleatorios criptográficamente fuerte. El siguiente fragmento de configuración establece el generador 

# de números pseudoaleatorio en SHA1PRNG:

#

# org.owasp.csrfguard.PRNG=SHA1PRNG

org.owasp.csrfguard.PRNG=SHA1PRNG











# Pseudo-random Number Generator Provider



# La propiedad del proveedor del generador de números pseudoaleatorios (org.owasp.csrfguard.PRNG.Provider) define qué

# implementación del proveedor de org.owasp.csrfguard.PRNG que deberíamos utilizar. La siguiente configuración

# el fragmento indica a la JVM que aproveche la implementación de SUN del algoritmo indicado por 

# org.owasp.csrfguard.PRNG propiedad:



# org.owasp.csrfguard.PRNG.Provider=SUN

org.owasp.csrfguard.PRNG.Provider=SUN



# SI ESTA EN EL WEB.XML configurado, por eso esta comentado aqui

# If not specifying the print config option in the web.xml, you can specify it here, to print the config

# on startup

org.owasp.csrfguard.Config.Print = true





